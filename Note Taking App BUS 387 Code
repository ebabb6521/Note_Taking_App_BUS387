import React, { useState, useEffect } from 'react';
import { Search, Check, List, Brain, CalendarDays, PlusCircle, Edit3, Trash2, ArrowLeftCircle } from 'lucide-react';

// Categories with their associated colors
const CATEGORIES = {
  academic: { name: "Academic", color: "bg-blue-100 text-blue-800" },
  career: { name: "Career", color: "bg-green-100 text-green-800" },
  social: { name: "Social", color: "bg-purple-100 text-purple-800" },
  physical: { name: "Physical", color: "bg-orange-100 text-orange-800" }
};

// AI recommendation logic
const getAIRecommendation = (noteText) => {
  const lowercaseText = noteText.toLowerCase();
  
  if (lowercaseText.includes('code') || lowercaseText.includes('coding')) {
    return { name: 'Claude', reason: 'coding-related topic detected' };
  } else if (lowercaseText.includes('math') || lowercaseText.includes('application')) {
    return { name: 'Gemini', reason: 'math or application mentioned' };
  } else if (lowercaseText.includes('x') || lowercaseText.includes('current event')) {
    return { name: 'Grok', reason: 'current events or X platform referenced' };
  } else {
    return { name: 'GPT', reason: 'general social or career topic' };
  }
};

// Helper function to limit text length for display
const truncateText = (text, maxLength = 100) => {
  return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;
};

// Generate a unique ID
const generateId = () => {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
};

const App = () => {
  // App states
  const [notes, setNotes] = useState(() => {
    const savedNotes = localStorage.getItem('notes');
    return savedNotes ? JSON.parse(savedNotes) : [];
  });
  const [view, setView] = useState('list'); // list, add, edit, view
  const [activeNote, setActiveNote] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('all');
  
  // Form states
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [category, setCategory] = useState('academic');
  const [reflection, setReflection] = useState('');
  const [aiSuggestion, setAiSuggestion] = useState({ name: '', reason: '' });
  
  // Save notes to localStorage when they change
  useEffect(() => {
    localStorage.setItem('notes', JSON.stringify(notes));
  }, [notes]);

  // Update AI suggestion when content changes
  useEffect(() => {
    if (content.trim()) {
      setAiSuggestion(getAIRecommendation(content));
    }
  }, [content]);

  // Reset form
  const resetForm = () => {
    setTitle('');
    setContent('');
    setCategory('academic');
    setReflection('');
    setAiSuggestion({ name: '', reason: '' });
  };

  // Add new note
  const handleAddNote = () => {
    const newNote = {
      id: generateId(),
      title,
      content,
      category,
      reflection,
      aiSuggestion,
      date: new Date().toISOString(),
      wordCount: content.split(/\s+/).filter(Boolean).length,
    };
    
    setNotes([newNote, ...notes]);
    resetForm();
    setView('list');
  };

  // Edit note
  const handleEditNote = () => {
    const updatedNotes = notes.map(note => 
      note.id === activeNote.id 
        ? {
            ...note, 
            title, 
            content, 
            category, 
            reflection,
            aiSuggestion,
            wordCount: content.split(/\s+/).filter(Boolean).length,
          }
        : note
    );
    
    setNotes(updatedNotes);
    resetForm();
    setView('list');
  };

  // Delete note
  const handleDeleteNote = (id) => {
    setNotes(notes.filter(note => note.id !== id));
  };

  // Edit existing note (setup form)
  const startEditNote = (note) => {
    setActiveNote(note);
    setTitle(note.title);
    setContent(note.content);
    setCategory(note.category);
    setReflection(note.reflection);
    setAiSuggestion(note.aiSuggestion);
    setView('edit');
  };

  // View note details
  const viewNoteDetails = (note) => {
    setActiveNote(note);
    setView('view');
  };

  // Filter notes based on search and category
  const filteredNotes = notes.filter(note => {
    const matchesSearch = 
      note.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
      note.content.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = filterCategory === 'all' || note.category === filterCategory;
    
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="flex flex-col h-screen max-w-4xl mx-auto p-4 bg-gray-50">
      {/* Header */}
      <header className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Smart Note-Taking App</h1>
        {view === 'list' && (
          <button 
            onClick={() => {resetForm(); setView('add');}}
            className="bg-blue-600 text-white py-2 px-4 rounded-lg flex items-center gap-2"
          >
            <PlusCircle size={18} />
            New Note
          </button>
        )}
        {view !== 'list' && (
          <button 
            onClick={() => {resetForm(); setView('list');}}
            className="text-gray-600 flex items-center gap-1"
          >
            <ArrowLeftCircle size={18} />
            Back to List
          </button>
        )}
      </header>

      {/* List View */}
      {view === 'list' && (
        <>
          {/* Search and Filter */}
          <div className="mb-6">
            <div className="flex gap-4 mb-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
                <input
                  type="text"
                  placeholder="Search notes..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 p-2 w-full border rounded-lg"
                />
              </div>
              <select
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
                className="p-2 border rounded-lg bg-white"
              >
                <option value="all">All Categories</option>
                {Object.entries(CATEGORIES).map(([key, {name}]) => (
                  <option key={key} value={key}>{name}</option>
                ))}
              </select>
            </div>
          </div>

          {/* Notes List */}
          <div className="flex-1 overflow-y-auto">
            {filteredNotes.length === 0 ? (
              <div className="text-center py-10 text-gray-500">
                <List size={40} className="mx-auto mb-4 opacity-50" />
                <p>No notes found. Create your first note!</p>
              </div>
            ) : (
              <div className="grid gap-4 grid-cols-1 md:grid-cols-2">
                {filteredNotes.map(note => (
                  <div 
                    key={note.id} 
                    className="bg-white p-4 rounded-lg shadow-sm border border-gray-100 cursor-pointer hover:shadow-md transition-shadow"
                    onClick={() => viewNoteDetails(note)}
                  >
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="font-medium text-lg">{note.title}</h3>
                      <span className={`text-xs px-2 py-1 rounded-full ${CATEGORIES[note.category].color}`}>
                        {CATEGORIES[note.category].name}
                      </span>
                    </div>
                    <p className="text-gray-600 text-sm mb-3">{truncateText(note.content)}</p>
                    <div className="flex justify-between items-center text-xs text-gray-500 mt-4">
                      <div className="flex items-center gap-1">
                        <CalendarDays size={14} />
                        {new Date(note.date).toLocaleDateString()}
                      </div>
                      <div className="flex items-center gap-1">
                        <Brain size={14} />
                        AI: {note.aiSuggestion.name}
                      </div>
                      <span>{note.wordCount} words</span>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </>
      )}

      {/* Add/Edit Note View */}
      {(view === 'add' || view === 'edit') && (
        <div className="flex-1 overflow-y-auto">
          <h2 className="text-xl font-semibold mb-4">
            {view === 'add' ? 'Create New Note' : 'Edit Note'}
          </h2>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Title</label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-2 border rounded-lg"
              placeholder="Note title"
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Category</label>
            <select
              value={category}
              onChange={(e) => setCategory(e.target.value)}
              className="w-full p-2 border rounded-lg"
            >
              {Object.entries(CATEGORIES).map(([key, {name}]) => (
                <option key={key} value={key}>{name}</option>
              ))}
            </select>
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Content</label>
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              className="w-full p-2 border rounded-lg h-40"
              placeholder="Write your detailed notes here..."
            />
            {content && (
              <div className="mt-2 text-sm text-gray-500">
                Word count: {content.split(/\s+/).filter(Boolean).length} words
              </div>
            )}
          </div>
          
          {content && (
            <div className="mb-4 p-3 bg-blue-50 rounded-lg border border-blue-100">
              <div className="flex items-center gap-2 mb-2">
                <Brain size={16} className="text-blue-600" />
                <span className="text-sm font-medium">AI Suggestion</span>
              </div>
              <p className="text-sm">
                Based on your note, you might want to discuss this with <strong>{aiSuggestion.name}</strong> ({aiSuggestion.reason})
              </p>
            </div>
          )}

          <div className="mb-4">
            <label className="block text-sm font-medium mb-1">Reflection/Interpretation</label>
            <textarea
              value={reflection}
              onChange={(e) => setReflection(e.target.value)}
              className="w-full p-2 border rounded-lg h-24"
              placeholder="How did this event go? What did you learn or feel about it?"
            />
          </div>
          
          <div className="flex gap-3 justify-end">
            <button
              onClick={() => {resetForm(); setView('list');}}
              className="px-4 py-2 border rounded-lg"
            >
              Cancel
            </button>
            <button
              onClick={view === 'add' ? handleAddNote : handleEditNote}
              disabled={!title || !content}
              className={`px-4 py-2 rounded-lg flex items-center gap-2 ${
                !title || !content 
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed' 
                  : 'bg-blue-600 text-white'
              }`}
            >
              <Check size={18} />
              {view === 'add' ? 'Save Note' : 'Update Note'}
            </button>
          </div>
        </div>
      )}

      {/* View Note Details */}
      {view === 'view' && activeNote && (
        <div className="flex-1 overflow-y-auto">
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center gap-2">
              <h2 className="text-xl font-semibold">{activeNote.title}</h2>
              <span className={`text-xs px-2 py-1 rounded-full ${CATEGORIES[activeNote.category].color}`}>
                {CATEGORIES[activeNote.category].name}
              </span>
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => startEditNote(activeNote)}
                className="p-2 text-gray-600 hover:bg-gray-100 rounded"
              >
                <Edit3 size={18} />
              </button>
              <button
                onClick={() => {
                  handleDeleteNote(activeNote.id);
                  setView('list');
                }}
                className="p-2 text-red-600 hover:bg-red-50 rounded"
              >
                <Trash2 size={18} />
              </button>
            </div>
          </div>
          
          <div className="bg-white p-4 rounded-lg border mb-4">
            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-500 mb-1">Content</h3>
              <div className="whitespace-pre-wrap">{activeNote.content}</div>
              <div className="mt-2 text-xs text-gray-400">
                {activeNote.wordCount} words
              </div>
            </div>
          </div>
          
          {activeNote.reflection && (
            <div className="bg-white p-4 rounded-lg border mb-4">
              <h3 className="text-sm font-medium text-gray-500 mb-1">Your Reflection</h3>
              <div className="whitespace-pre-wrap">{activeNote.reflection}</div>
            </div>
          )}
          
          <div className="bg-blue-50 p-4 rounded-lg border border-blue-100 mb-4">
            <h3 className="text-sm font-medium text-gray-700 mb-1 flex items-center gap-2">
              <Brain size={16} />
              AI Recommendation
            </h3>
            <p>
              For this note, we recommend discussing with <strong>{activeNote.aiSuggestion.name}</strong>
              <span className="text-sm text-gray-500"> ({activeNote.aiSuggestion.reason})</span>
            </p>
          </div>
          
          <div className="text-xs text-gray-500">
            Created on {new Date(activeNote.date).toLocaleString()}
          </div>
        </div>
      )}
    </div>
  );
};

export default App;